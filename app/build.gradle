apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply from: '../build.gradle'

buildscript {
  ext.kotlin_version = '1.0.6'
  repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://jitpack.io" }
  }
  dependencies {
    classpath 'io.fabric.tools:gradle:1.+'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

repositories {
  jcenter()
  mavenCentral()
  maven { url 'https://maven.fabric.io/public' }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  maven { url "https://jitpack.io" }
}

android {
  compileSdkVersion 25
  buildToolsVersion '25.0.1'

  sourceSets {
    String testDir = 'src/test/kotlin'
    test {
      java.srcDir testDir
    }
  }

  final File versionFile = file("file:version.properties")
  final Properties versionProps = new Properties();
  versionProps.load(new FileInputStream(versionFile));
  def final code = versionProps.getProperty('versionCode').toInteger();
  def final name = versionProps.getProperty('versionName').toString();
  def final appIdBase = 'com.github.premnirmal.tickerwidget'

  defaultConfig {
    applicationId appIdBase
    minSdkVersion 14
    targetSdkVersion 25
    testInstrumentationRunner "com.github.premnirmal.ticker.mock.MockTestRunner"

    versionCode = code
    versionName = name

    multiDexEnabled true
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  kapt {
    generateStubs = true
  }

  dexOptions {
    javaMaxHeapSize "2048M"
  }

  signingConfigs {
    release {
      storeFile file("file:keystore.jks")

      final File propsFile = file("file:keystore.properties");
      if (propsFile.exists()) {
        final Properties props = new Properties();
        props.load(new FileInputStream(propsFile));
        storePassword props.getProperty('key.store.password')
        keyPassword props.getProperty('key.alias.password')
        keyAlias props.getProperty('key.alias.alias')
      }
    }
  }

  productFlavors {
    dev {
      applicationId = appIdBase + ".dev"
    }
    prod {
      applicationId = appIdBase
    }
    purefloss {
      // no analytics, but still using the production packageName
      applicationId = appIdBase
    }
  }

  buildTypes {
    release {
      debuggable false
      signingConfig signingConfigs.release
    }
    debug {
      debuggable true
      versionNameSuffix '-DEBUG'
      ext.enableCrashlytics = false
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
  }
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

  compile 'com.android.support:appcompat-v7:25.2.0'
  compile 'com.android.support:support-v4:25.2.0'
  compile 'com.android.support:design:25.2.0'
  compile 'com.android.support:multidex:1.0.1'

  compile 'javax.inject:javax.inject:1'
  compile 'javax.annotation:javax.annotation-api:1.2'

  compile 'com.google.dagger:dagger:2.0'
  kapt 'com.google.dagger:dagger-compiler:2.0'

  compile 'com.squareup.okhttp3:okhttp:3.5.0'
  compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
  compile 'com.squareup.retrofit2:retrofit:2.2.0'
  compile 'com.squareup.retrofit2:converter-gson:2.2.0'
  compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'

  compile 'io.reactivex:rxandroid:1.1.0'
  compile 'io.reactivex:rxjava:1.1.0'

  compile 'com.trello:rxlifecycle:0.5.0'
  compile 'com.trello:rxlifecycle-kotlin:0.5.0'

  compile 'joda-time:joda-time:2.6'
  compile 'com.github.developerpaul123.filepickerlibrary:library:1.1'
  compile 'com.github.PhilJay:MPAndroidChart:v2.2.3'
  compile 'uk.co.chrisjenx:calligraphy:2.1.0'
  devCompile 'com.jakewharton.timber:timber:4.3.1'

  prodCompile 'com.google.android.gms:play-services:7.0.0'
  prodCompile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
    transitive = true;
  }

  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:1.7.1'
  testCompile 'org.robolectric:robolectric:3.2.2'
  testCompile 'org.robolectric:shadows-support-v4:3.2.2'
  testCompile 'com.android.support:support-annotations:25.2.0'
  testCompile('com.android.support.test:rules:0.5') {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
  testCompile('com.android.support.test:runner:0.5') {
    exclude group: 'com.android.support', module: 'support-annotations'
  }
  testCompile 'com.android.tools:testutils:24.3.1'
  testCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
  testCompile 'org.hamcrest:hamcrest-library:1.3'
  testCompile 'org.mockito:mockito-core:2.7.5'
  testCompile('com.nhaarman:mockito-kotlin:1.3.0') {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
  }
  kaptTest 'com.google.dagger:dagger-compiler:2.0'
}

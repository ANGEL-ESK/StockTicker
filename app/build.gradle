buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.1'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    final File versionFile = file("file:version.properties")
    final Properties versionProps = new Properties();
    versionProps.load(new FileInputStream(versionFile));
    def final code = versionProps.getProperty('versionCode').toInteger();
    def final name = versionProps.getProperty('versionName').toString();
    def final appIdBase = 'com.github.premnirmal.tickerwidget'
    defaultConfig {
        applicationId appIdBase
        minSdkVersion 14
        targetSdkVersion 21

        versionCode = code
        versionName = name

        multiDexEnabled true

        final File propsFile = file("file:keystore.properties");
        if (propsFile.exists()) {
            final Properties props = new Properties();
            props.load(new FileInputStream(propsFile));
            def final akey = props.getProperty('analyticsKey')
            buildConfigField "String", "KEY", akey
        } else {
            buildConfigField "String", "KEY", ""
        }
    }

    signingConfigs {
        release {
            storeFile file("file:keystore.jks")

            final File propsFile = file("file:keystore.properties");
            if (propsFile.exists()) {
                final Properties props = new Properties();
                props.load(new FileInputStream(propsFile));
                storePassword props.getProperty('key.store.password')
                keyPassword props.getProperty('key.alias.password')
                keyAlias props.getProperty('key.alias.alias')
            }
        }
    }

    productFlavors {
        dev {
            applicationId = appIdBase + ".dev"
        }
        prod {
            applicationId = appIdBase
        }
    }

    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            versionNameSuffix '-DEBUG'
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.squareup.dagger:dagger-compiler:1.2.+'
    compile 'com.squareup.dagger:dagger:1.2.+'
    compile 'com.squareup.retrofit:retrofit:1.8.+'
    compile 'io.reactivex:rxandroid:0.24.+'
    compile 'joda-time:joda-time:2.6'
    compile 'com.github.developerpaul123.filepickerlibrary:library:1.+'
    compile 'com.jjoe64:graphview:4.0.0'
    compile 'com.android.support:support-v4:21.0.2'
    compile 'uk.co.chrisjenx:calligraphy:2.0.1'
    compile 'com.daimajia.swipelayout:library:1.0.3@aar'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
        transitive = true;
    }
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar'

    compile 'com.android.support:multidex:1.0.0'
    compile files('libs/tapjoyconnectlibrary.jar')
    compile 'com.google.android.gms:play-services:7.0.0'
}
